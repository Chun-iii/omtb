#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import os
import json
import numpy as np
import random
import time
import sys
import tensorflow as tf
import random

sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from collections import deque
from std_msgs.msg import Float32MultiArray
from env.environment_rooms import Env
from keras.models import Sequential, load_model
from keras.optimizers import RMSprop
from keras.layers import Dense, Dropout, Activation


EPISODES = 3000

class Agent:
    def __init__(self, state_size, action_size):
        self.pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
        self.result = Float32MultiArray()
        self.load_model = False
        self.load_episode = 0
        self.state_dim = state_size
        self.action_dim = action_size
        self.episode_step = 6000
        self.target_update = 2000
        self.discount_factor = 0.99
        self.learning_rate = 0.00025
        self.epsilon = 1.0
        self.epsilon_decay = 0.99
        self.epsilon_min = 0.05
        self.batch_size = 64
        self.train_start = 64
        self.replay_buffer = deque(maxlen=1000000)
        self.neuron_num = 100
        self.sess = tf.InteractiveSession()
        self.init_network()
        self.sess.run(tf.global_variables_initializer())

    def init_network(self):
        self.Q_real = tf.placeholder(tf.float32, shape=[None], name='estimate')
        self.action_choose = tf.placeholder(tf.float32, shape=[None, self.action_dim], name='action_choose')
        self.state = tf.placeholder(tf.float32, shape=[None, self.state_dim], name='state')
        self.goal = tf.placeholder(tf.float32, shape=[None, 2], name='goal')
        # state_ = tf.expand_dims(self.state, self.state_dim, name='state_')
        # goal_ = tf.expand_dims(self.goal, self.state_dim, name='goal_')
        self.input = tf.concat([self.state, self.goal], 1)
        w1 = tf.Variable(tf.random_normal(shape=[self.state_dim+2, self.neuron_num], stddev=0.01), name='w1')
        b1 = tf.Variable(tf.constant(0.01, shape=[self.neuron_num], dtype=tf.float32), name='b1')
        hidden_layer = tf.nn.relu(tf.matmul(self.input, w1) + b1)
        w2 = tf.Variable(tf.random_normal(shape=[self.neuron_num, self.action_dim], stddev=0.01), name='w2')
        b2 = tf.Variable(tf.constant(0.01, shape=[self.action_dim], dtype=tf.float32), name='b2')
        self.Q_value = tf.matmul(hidden_layer, w2) + b2
        self.Q_estimate = tf.reduce_sum(tf.multiply(self.Q_value, self.action_choose), reduction_indices=1)
        self.cost = (tf.reduce_mean(tf.square(self.Q_real - self.Q_estimate)))/2.0
        self.optimizer = tf.train.RMSPropOptimizer(0.00025, 0.99, 0.0, 1e-6).minimize(self.cost)

    def get_greedy_action(self, state, goal):
        value = self.Q_value.eval(feed_dict={self.state: [state], self.goal: [goal]})
        return np.argmax(value)

    def choose_action(self, observation, goal):
        # if self.epsilon > self.epsilon_min:
        #     self.epsilon *= self.epsilon_decay
        if np.random.uniform() < self.epsilon:
            action = random.randrange(self.action_dim)
        else:
            action = self.get_greedy_action(observation, goal)
        return action

    def sample(self, state, action, goal, next_reward, next_state, done):
        my_action = np.zeros(self.action_dim)
        my_action[action] = 1
        self.replay_buffer.append([state, my_action, goal, next_reward, next_state, done])
        # if len(self.replay_buffer) > REPLAY_SIZE:
        #     self.replay_buffer.popleft()
        if len(self.replay_buffer) > self.train_start:
            self.train()

    def train(self):
        mini_batch = random.sample(self.replay_buffer, self.batch_size)
        state_batch = [data[0] for data in mini_batch]
        action_batch = [data[1] for data in mini_batch]
        goal_batch = [data[2] for data in mini_batch]
        next_reward_batch = [data[3] for data in mini_batch]
        next_state_batch = [data[4] for data in mini_batch]
        done_batch = [data[5] for data in mini_batch]

        estimate = []

        next_state_q = self.Q_value.eval(feed_dict={self.state: next_state_batch, self.goal: goal_batch})
        for i in range(self.batch_size):
            if done_batch[i] == 0:
                estimate.append(next_reward_batch[i] + self.discount_factor * np.max(next_state_q[i]))
            else:
                estimate.append(next_reward_batch[i])

        self.optimizer.run(
            feed_dict={
                self.state: state_batch,
                self.goal: goal_batch,
                self.action_choose: action_batch,
                self.Q_real: estimate
            }
        )

if __name__ == '__main__':
    rospy.init_node('omtb_dqn')
    pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
    pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)
    result = Float32MultiArray()
    get_action = Float32MultiArray()

    state_size = 26
    action_size = 5

    env = Env(action_size)

    agent = Agent(state_size, action_size)
    scores, episodes = [], []
    global_step = 0
    start_time = time.time()
    suc = 0
    all_turn = 0
    for e in range(agent.load_episode + 1, EPISODES):
        done = False
        state, goal = env.reset()
        score = 0
        all_turn += 1
        for t in range(agent.episode_step):
            action = agent.choose_action(state, goal)

            next_state, reward, done = env.step(action)

            agent.sample(state, action, goal, reward, next_state, done)

            # if len(agent.memory) >= agent.train_start:
            #     if global_step <= agent.target_update:
            #         agent.trainModel()
            #     else:
            #         agent.trainModel(True)

            score += reward
            state = next_state
            get_action.data = [action, score, reward]
            pub_get_action.publish(get_action)

            # if e % 10 == 0:
            #     agent.model.save(agent.dirPath + str(e) + '.h5')
            #     with open(agent.dirPath + str(e) + '.json', 'w') as outfile:
            #         json.dump(param_dictionary, outfile)

            if t >= 500:
                rospy.loginfo("Time out!!")
                done = True

            if done:
                if reward == 200:
                    suc += 1
                print(suc)
                print(all_turn)
                result.data = [score, 1.0*suc/all_turn]
                pub_result.publish(result)
                # agent.updateTargetModel()
                scores.append(score)
                episodes.append(e)
                m, s = divmod(int(time.time() - start_time), 60)
                h, m = divmod(m, 60)

                rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d',
                              e, score, len(agent.replay_buffer), agent.epsilon, h, m, s)
                param_keys = ['epsilon']
                param_values = [agent.epsilon]
                param_dictionary = dict(zip(param_keys, param_values))
                break

            global_step += 1
            if global_step % agent.target_update == 0:
                rospy.loginfo("UPDATE TARGET NETWORK")

        if agent.epsilon > agent.epsilon_min:
            agent.epsilon *= agent.epsilon_decay

# class ReinforceAgent():
#     def __init__(self, state_size, action_size):
#         self.pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
#         self.dirPath = os.path.dirname(os.path.realpath(__file__))
#         self.dirPath = self.dirPath.replace('turtlebot3_dqn/nodes', 'turtlebot3_dqn/save_model/stage_1_')
#         self.result = Float32MultiArray()
#
#         self.load_model = False
#         self.load_episode = 0
#         self.state_size = state_size
#         self.action_size = action_size
#         self.episode_step = 6000
#         self.target_update = 2000
#         self.discount_factor = 0.99
#         self.learning_rate = 0.00025
#         self.epsilon = 1.0
#         self.epsilon_decay = 0.99
#         self.epsilon_min = 0.05
#         self.batch_size = 64
#         self.train_start = 64
#         self.memory = deque(maxlen=1000000)
#
#         self.model = self.buildModel()
#         self.target_model = self.buildModel()
#
#         self.updateTargetModel()
#
#         if self.load_model:
#             self.model.set_weights(load_model(self.dirPath+str(self.load_episode)+".h5").get_weights())
#
#             with open(self.dirPath+str(self.load_episode)+'.json') as outfile:
#                 param = json.load(outfile)
#                 self.epsilon = param.get('epsilon')
#
#     def buildModel(self):
#         model = Sequential()
#         dropout = 0.2
#
#         model.add(Dense(64, input_shape=(self.state_size,), activation='relu', kernel_initializer='lecun_uniform'))
#
#         model.add(Dense(64, activation='relu', kernel_initializer='lecun_uniform'))
#         model.add(Dropout(dropout))
#
#         model.add(Dense(self.action_size, kernel_initializer='lecun_uniform'))
#         model.add(Activation('linear'))
#         model.compile(loss='mse', optimizer=RMSprop(lr=self.learning_rate, rho=0.9, epsilon=1e-06))
#         model.summary()
#
#         return model
#
#     def getQvalue(self, reward, next_target, done):
#         if done:
#             return reward
#         else:
#             return reward + self.discount_factor * np.amax(next_target)
#
#     def updateTargetModel(self):
#         self.target_model.set_weights(self.model.get_weights())
#
#     def getAction(self, state):
#         if np.random.rand() <= self.epsilon:
#             self.q_value = np.zeros(self.action_size)
#             return random.randrange(self.action_size)
#         else:
#             q_value = self.model.predict(state.reshape(1, len(state)))
#             self.q_value = q_value
#             return np.argmax(q_value[0])
#
#     def appendMemory(self, state, action, reward, next_state, done):
#         self.memory.append((state, action, reward, next_state, done))
#
#     def trainModel(self, target=False):
#         mini_batch = random.sample(self.memory, self.batch_size)
#         X_batch = np.empty((0, self.state_size), dtype=np.float64)
#         Y_batch = np.empty((0, self.action_size), dtype=np.float64)
#
#         for i in range(self.batch_size):
#             states = mini_batch[i][0]
#             actions = mini_batch[i][1]
#             rewards = mini_batch[i][2]
#             next_states = mini_batch[i][3]
#             dones = mini_batch[i][4]
#
#             q_value = self.model.predict(states.reshape(1, len(states)))
#             self.q_value = q_value
#
#             if target:
#                 next_target = self.target_model.predict(next_states.reshape(1, len(next_states)))
#
#             else:
#                 next_target = self.model.predict(next_states.reshape(1, len(next_states)))
#
#             next_q_value = self.getQvalue(rewards, next_target, dones)
#
#             X_batch = np.append(X_batch, np.array([states.copy()]), axis=0)
#             Y_sample = q_value.copy()
#
#             Y_sample[0][actions] = next_q_value
#             Y_batch = np.append(Y_batch, np.array([Y_sample[0]]), axis=0)
#
#             if dones:
#                 X_batch = np.append(X_batch, np.array([next_states.copy()]), axis=0)
#                 Y_batch = np.append(Y_batch, np.array([[rewards] * self.action_size]), axis=0)
#
#         self.model.fit(X_batch, Y_batch, batch_size=self.batch_size, epochs=1, verbose=0)
#
#
# if __name__ == '__main__':
#     rospy.init_node('turtlebot3_dqn_stage_1')
#     pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
#     pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)
#     result = Float32MultiArray()
#     get_action = Float32MultiArray()
#
#     state_size = 26
#     action_size = 5
#
#     env = Env(action_size)
#
#     agent = ReinforceAgent(state_size, action_size)
#     scores, episodes = [], []
#     global_step = 0
#     start_time = time.time()
#
#     for e in range(agent.load_episode + 1, EPISODES):
#         done = False
#         state = env.reset()
#         score = 0
#         for t in range(agent.episode_step):
#             action = agent.getAction(state)
#
#             next_state, reward, done = env.step(action)
#
#             agent.appendMemory(state, action, reward, next_state, done)
#
#             if len(agent.memory) >= agent.train_start:
#                 if global_step <= agent.target_update:
#                     agent.trainModel()
#                 else:
#                     agent.trainModel(True)
#
#             score += reward
#             state = next_state
#             get_action.data = [action, score, reward]
#             pub_get_action.publish(get_action)
#
#             if e % 10 == 0:
#                 agent.model.save(agent.dirPath + str(e) + '.h5')
#                 with open(agent.dirPath + str(e) + '.json', 'w') as outfile:
#                     json.dump(param_dictionary, outfile)
#
#             if t >= 500:
#                 rospy.loginfo("Time out!!")
#                 done = True
#
#             if done:
#                 result.data = [score, np.max(agent.q_value)]
#                 pub_result.publish(result)
#                 agent.updateTargetModel()
#                 scores.append(score)
#                 episodes.append(e)
#                 m, s = divmod(int(time.time() - start_time), 60)
#                 h, m = divmod(m, 60)
#
#                 rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d',
#                               e, score, len(agent.memory), agent.epsilon, h, m, s)
#                 param_keys = ['epsilon']
#                 param_values = [agent.epsilon]
#                 param_dictionary = dict(zip(param_keys, param_values))
#                 break
#
#             global_step += 1
#             if global_step % agent.target_update == 0:
#                 rospy.loginfo("UPDATE TARGET NETWORK")
#
#         if agent.epsilon > agent.epsilon_min:
#             agent.epsilon *= agent.epsilon_decay
